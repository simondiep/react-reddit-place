{"version":3,"sources":["Constants.js","components/GridItem.jsx","components/Grid.jsx","App.js","serviceWorker.js","index.js"],"names":["STORAGE_URL","GridItem","props","react_default","a","createElement","lib_default","className","color","onClose","rowIndex","columnIndex","_ref","fetch","method","headers","Content-Type","body","JSON","stringify","bind","placement","enableAlpha","Grid","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","drawing","_this2","then","response","json","jsonResponse","setState","gridItems","length","push","src_components_GridItem","map","rowItem","Component","App","Grid_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAAaA,EAAc,oGC4BZC,MAtBE,SAAAC,GAAK,OACpBC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,UAAU,cACVC,MAAON,EAAMM,MAAQN,EAAMM,MAAQ,QACnCC,QAQJ,SAA4BC,EAAUC,EAAtCC,GAA8D,IAATJ,EAASI,EAATJ,MACnDK,MAAMb,EAAa,CACjBc,OAAQ,OACRC,QAAS,CACPC,eAAgB,mCAElBC,KAAMC,KAAKC,UAAU,CAAET,WAAUC,cAAaH,aAdlBY,KAAK,KAAMlB,EAAMQ,SAAUR,EAAMS,aAC7DU,UAAU,UACVC,aAAa,GAEbnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eCTEgB,sBACnB,SAAAA,EAAYrB,GAAO,IAAAsB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMzB,KACD6B,MAAQ,CACXC,QAAS,MAHMR,mFAOC,IAAAS,EAAAN,KAClBd,MAAMb,GACHkC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAY,OAAIJ,EAAKK,SAAS,CAAEN,QAASK,EAAaL,6CAI9D,IAAKL,KAAKI,MAAMC,QACd,OAAO7B,EAAAC,EAAAC,cAAA,2BAIT,IADA,IAAMkC,EAAY,GACT7B,EAAW,EAAGA,EAAWiB,KAAKI,MAAMC,QAAQQ,OAAQ9B,IAAY,CACvE6B,EAAU7B,GAAY,GACtB,IAAK,IAAIC,EAAc,EAAGA,EAAcgB,KAAKI,MAAMC,QAAQtB,GAAU8B,OAAQ7B,IAC3E4B,EAAU7B,GAAU+B,KAClBtC,EAAAC,EAAAC,cAACqC,EAAD,CAAUlC,MAAOmB,KAAKI,MAAMC,QAAQtB,GAAUC,GAAcD,SAAUA,EAAUC,YAAaA,KAKnG,OACER,EAAAC,EAAAC,cAAA,WACGkC,EAAUI,IAAI,SAAAC,GACb,OAAOzC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAWqC,aAhCTC,cCWnBC,mLAVX,OACE3C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAf,uCACAJ,EAAAC,EAAAC,cAAC0C,EAAD,cANUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.0ef91570.chunk.js","sourcesContent":["export const STORAGE_URL = \"https://wt-82e23ef79ade2a8d8cfed3117b878cdb-0.sandbox.auth0-extend.com/reddit-place\";\r\n","import React from \"react\";\r\nimport ColorPicker from \"rc-color-picker\";\r\nimport { STORAGE_URL } from \"../Constants\";\r\nimport \"./GridItem.css\";\r\nimport \"rc-color-picker/assets/index.css\";\r\n\r\nconst GridItem = props => (\r\n  <ColorPicker\r\n    className=\"ColorPicker\"\r\n    color={props.color ? props.color : \"white\"}\r\n    onClose={onColorPickerClose.bind(null, props.rowIndex, props.columnIndex)}\r\n    placement=\"topLeft\"\r\n    enableAlpha={false}\r\n  >\r\n    <div className=\"GridItem\" />\r\n  </ColorPicker>\r\n);\r\n\r\nfunction onColorPickerClose(rowIndex, columnIndex, { color }) {\r\n  fetch(STORAGE_URL, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json; charset=utf-8\",\r\n    },\r\n    body: JSON.stringify({ rowIndex, columnIndex, color }),\r\n  });\r\n}\r\n\r\nexport default GridItem;\r\n","import React, { Component } from \"react\";\r\nimport GridItem from \"./GridItem\";\r\nimport { STORAGE_URL } from \"../Constants\";\r\nimport \"./Grid.css\";\r\n\r\nexport default class Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      drawing: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(STORAGE_URL)\r\n      .then(response => response.json())\r\n      .then(jsonResponse => this.setState({ drawing: jsonResponse.drawing }));\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.drawing) {\r\n      return <div>\"Loading...\"</div>;\r\n    }\r\n    // Given a 2d array, render it\r\n    const gridItems = [];\r\n    for (let rowIndex = 0; rowIndex < this.state.drawing.length; rowIndex++) {\r\n      gridItems[rowIndex] = [];\r\n      for (let columnIndex = 0; columnIndex < this.state.drawing[rowIndex].length; columnIndex++) {\r\n        gridItems[rowIndex].push(\r\n          <GridItem color={this.state.drawing[rowIndex][columnIndex]} rowIndex={rowIndex} columnIndex={columnIndex} />,\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {gridItems.map(rowItem => {\r\n          return <div className=\"GridRow\">{rowItem}</div>;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Grid from \"./components/Grid\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div>Reddit Place Clone</div>\r\n        <div className=\"Subtext\">Click on a tile to change its color</div>\r\n        <Grid />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}